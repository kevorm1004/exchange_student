A. 치명적/높음 우선순위 (Critical/High Priority)
채팅 목록 오류 수정 (다른 사용자 채팅 노출 문제)

문제: server/storage.ts의 getChatRooms 함수 로직이 현재 로그인한 사용자가 참여한 채팅방만 정확히 필터링하지 못할 가능성이 있습니다.

지시: getChatRooms 함수의 쿼리가 or(eq(chatRooms.buyerId, userId), eq(chatRooms.sellerId, userId)) 조건을 사용하여, 정확히 현재 로그인한 userId가 포함된 채팅방만 가져오도록 로직을 다시 한번 검증하고 수정해 주세요.

하단 네비게이션 채팅 알림 배지 기능 구현

문제: client/src/components/layout/bottom-nav.tsx에서 채팅 아이콘의 알림 숫자가 '2'로 하드코딩되어 있습니다.

지시:

shared/schema.ts의 messages 테이블에 isRead: boolean().default(false) 컬럼을 추가하고, drizzle-kit push를 실행하여 DB에 반영해 주세요.

서버에 안 읽은 메시지 수를 반환하는 API 엔드포인트(GET /api/chats/unread-count)를 새로 만드세요.

bottom-nav.tsx에서 useQuery를 사용해 이 API를 주기적으로 호출(refetchInterval: 30000)하여, 그 결과값을 뱃지에 동적으로 표시하도록 수정해 주세요. (0개일 경우 뱃지 숨김)

전역 알림 기능 구현

문제: 헤더(header.tsx)의 알림(Bell) 아이콘이 UI만 존재하고 아무 기능이 없습니다.

지시:

shared/schema.ts에 notifications 테이블을 새로 설계하세요. (필드: id, userId, type (e.g., 'new_message', 'new_comment'), content, link (이동할 URL), isRead, createdAt)

서버 로직을 수정하여, (1)새 메시지 수신, (2)내 게시글에 댓글 작성, (3)거래 상태 변경 시 notifications 테이블에 데이터를 생성하도록 구현하세요.

알림 목록을 가져오는 API (GET /api/notifications)와 알림을 읽음 처리하는 API (PATCH /api/notifications/:id/read)를 만드세요.

헤더의 알림 아이콘 클릭 시, 드롭다운 메뉴 형태로 알림 목록을 보여주고, 각 알림 클릭 시 link로 이동하도록 클라이언트 로직을 구현하세요.

DB 쿼리 성능 개선 (메모리 필터링 -> DB 필터링)

문제: /api/items API가 DB에서 모든 물품을 조회한 후 서버 메모리에서 필터링하고 있습니다. 이는 데이터 증가 시 심각한 성능 저하를 유발합니다.

지시: storage.ts의 아이템 조회 관련 함수들을 리팩토링하여, school, country 등 모든 필터링 조건이 Drizzle ORM의 where 절을 통해 데이터베이스 쿼리 레벨에서 직접 처리되도록 수정해 주세요.

마이페이지 하위 메뉴 페이지 개발

문제: /my 페이지의 '내 상품 관리', '관심 상품', '리뷰 관리', '설정' 메뉴가 실제 페이지와 연결되어 있지 않습니다.

지시:

/client/src/pages/my/ 디렉토리를 만들고, 그 안에 MyItems.tsx, MyFavorites.tsx, MyReviews.tsx 파일을 생성하세요.

/client/src/pages/에 Settings.tsx 파일을 생성하세요.

App.tsx의 라우터에 위 페이지들에 대한 경로를 추가하고, 각 페이지에는 "준비 중인 페이지입니다."라는 내용의 기본 UI를 구성해 주세요.

B. 보통 우선순위 (Medium Priority)
물품 상세 페이지 UI 분기 처리

문제: /items/:id 페이지에서 내가 판매하는 상품을 볼 때도 '채팅하기' 버튼이 보입니다.

지시: detail.tsx에서 현재 로그인한 user.id와 item.sellerId를 비교하여, 판매자 본인일 경우 하단의 '채팅하기' 버튼을 '상품 수정' / '판매 상태 변경' 등의 관리 버튼으로 교체하는 UI 로직을 추가해 주세요.

인증 환경 변수 설정

문제: server/passport-config.ts와 google-oauth-test.html에 Google OAuth 리다이렉트 URI가 Replit URL로 하드코딩되어 있어, 다른 환경(로컬, AWS)에서 동작하지 않습니다.

지시: Replit의 Secrets 기능을 사용하여 GOOGLE_CALLBACK_URL, JWT_SECRET 등의 환경 변수를 설정하고, 코드에서는 process.env를 통해 이 값들을 참조하도록 수정해 주세요.

DB 스키마 정규화 (likes 컬럼 제거)

문제: shared/schema.ts의 items 테이블에 likes 카운트 컬럼과, 별도의 favorites 테이블이 공존하여 데이터 불일치를 유발할 수 있습니다.

지시: items 테이블에서 likes 컬럼을 삭제하세요. '좋아요' 수는 favorites 테이블의 레코드 수를 count()하여 동적으로 계산하도록 관련 쿼리를 수정해 주세요.

로딩 및 에러 상태 UI 일관성 확보

문제: 데이터를 불러오는 페이지들에서 로딩 상태(스피너, 스켈레톤 UI)나 에러 상태(에러 메시지, 재시도 버튼) UI가 없거나 일관되지 않습니다.

지시: 재사용 가능한 LoadingSpinner.tsx와 ErrorDisplay.tsx 컴포넌트를 생성하고, react-query의 isLoading, isError 상태를 활용하여 데이터 조회 로직이 있는 모든 페이지에 일관되게 적용해 주세요.

C. 낮음 우선순위 (Low Priority)
마이페이지 통계 데이터 연동

문제: /my 페이지의 활동 현황(판매중, 판매완료 등) 수치가 하드코딩되어 있습니다.

지시: GET /api/users/stats 엔드포인트를 만들고, storage.ts에서 사용자의 판매/구매 내역을 실제로 count하는 쿼리를 작성하여 API와 페이지를 연동해 주세요.

검색 기능 개선

문제: 현재 검색 기능은 단순 LIKE 쿼리를 사용하여 성능이 좋지 않습니다.

지시: 장기적으로 성능 개선을 위해, PostgreSQL의 Full-Text Search 기능을 사용하도록 searchItems 함수를 고도화하는 것을 검토하고, 관련 주석을 코드에 남겨주세요.

경량 라이브러리로 교체 (최적화)

문제: client/src/pages/chat-room.tsx에서 moment-timezone 라이브러리를 사용하고 있어 번들 크기에 불필요한 영향을 줍니다.

지시: moment-timezone을 date-fns-tz 또는 dayjs와 같은 더 가벼운 라이브러리로 교체하여 번들 크기를 최적화해 주세요.