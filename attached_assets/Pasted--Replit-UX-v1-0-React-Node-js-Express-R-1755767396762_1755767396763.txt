# Replit 작업 프롬프트 — 이미지·환율·UX 개선 v1.0 (교환학생 중고거래)

아래 요구사항을 **React + Node.js(Express)** 기반의 현 프로젝트(Replit) 위에 반영해 주세요. DB는 **현 스키마 유지**를 원칙으로 하되, 필요한 경우 최소 테이블/컬렉션만 추가합니다.

---

## 0) 공통 원칙

* 성능 우선: 이미지 **지연 로딩(lazy-loading)**, **응답 캐시/쿼리 캐시** 적극 사용.
* 네트워크 절감: 이미지 **다중 해상도/포맷(WebP/AVIF↔︎JPEG fallback)**, 환율 **서버 캐싱**.
* UX: 불필요한 팝업 제거, **즉시 반응(optimistic UI)**, 접근성(키보드/스크린리더 라벨) 준수.
* 보안: 이미지 업로드는 **S3/Cloudinary 직접 업로드**(presigned URL), MIME/용량 검증.

---

## 1) 이미지 파이프라인 (홈/상세/원본 3단계)

**요구사항**

1. 업로드: 사용자가 업로드한 **원본**은 S3(또는 Cloudinary)에 그대로 저장.
2. 서버/외부 서비스에서 자동으로 **3가지 버전** 생성/제어:

   * **썸네일**: 정방형 200~~400px, 품질 70~~75%.
   * **중간본**: 가로 800~~1200px, 품질 80~~85%.
   * **원본**: 변형 없이 보존하되 **요청 시에만 로딩**.
3. 프론트 표시 위치별 매핑:

   * **홈 화면(카드 그리드)** → 썸네일.
   * **상품 상세 상단** → 중간본.
   * **상세에서 이미지 클릭(뷰어/모달)** → 원본.
4. **lazy-loading** 적용, `srcset/sizes`로 반응형 제공. 포맷은 WebP/AVIF 지원 시 우선, 미지원 브라우저는 JPEG로 폴백.
5. 아래 문구의 **진행 팝업은 금지**: "고화질로 사진을 압축하고 있습니다.". **오류 시에만** 경고 노출.

**수행 지침**

* Cloudinary/Imgix 변환 URL 또는 S3 업로드+Lambda(Sharp) 방식 중 **현 구조에 맞는 쪽**으로 구현.
* 업로드 성공 시 별도 "완료" 팝업 **표시하지 않음**. 실패 시에만 에러 토스트/다이얼로그.

---

## 2) 환율 연동(일 1회 갱신, 서버 캐싱)

**요구사항**

1. **하루 1회**(KST 03:00 권장) 서버에서 환율 데이터 갱신 후 캐싱(DB 또는 메모리).
2. 기본 통화는 **KRW**. 표시 규칙:

   * 홈/상세 가격 기본 표시는 **KRW 환산가**.
   * 상품이 **다른 통화**로 입력된 경우, **우측 괄호**에 **원 통화 기준 금액** 표기.

     * 예) `₩12,300 (US$9.10)` 또는 `12,300원 (JPY ¥1,210)`
3. 프론트는 **서버에서 캐싱된 환율만** 조회. 프론트에서 외부 환율 API 직접 호출 금지.
4. 환율 API 장애 시 마지막 성공 값 사용, 없으면 **원 통화만** 노출(괄호 표기 유지, KRW 환산 생략).

**수행 지침**

* 무료 API(예: ExchangeRate.host/Frankfurter) 중 하나 사용, **요청량 최소화**(일 1회 + 수동 강제 갱신 엔드포인트 제공).
* 서버 유틸 `convert(amount, from, to)` 구현, 고정 소수점 반올림(소수점 0\~2자리) 및 통화별 기호 규칙 반영.
* Node 스케줄러(node-cron) 사용, 타임존 `Asia/Seoul`.

**API(백엔드)**

* `GET /api/exchange?base=KRW` → 캐싱된 레이트 반환.
* `POST /api/exchange/refresh`(관리자) → 즉시 갱신.

---

## 3) 홈 화면 개선

**요구사항**

1. **필터 클릭 시 로딩 미노출**

   * 전체 페이지 스피너/로딩막 **금지**. 기존 리스트를 유지한 채 **백그라운드 갱신**.
   * React Query(또는 동등 기능)에서 `keepPreviousData: true`/`placeholderData` 활용, **플리커/점프 없음**.
2. **가격 표기**

   * 기본: **KRW 환산가**.
   * 상품의 원화폐가 KRW가 아닐 경우, **우측 괄호에 원 통화 금액** 표기(섬네일 카드/리스트 아이템 모두 동일 규칙 적용).
3. **관심(하트) 토글**

   * 하트 클릭 → 관심 상품 저장/해제(낙관적 업데이트). 비로그인 시 로그인 유도.
   * MY > 관심 상품 페이지에서 **관심 리스트** 노출 및 해제 가능.
4. **국가 필터**

   * 판매자가 설정한 **거래 국가** 기준으로 필터링. 해당 국가 선택 시 **일치 상품만** 리스트업.

**API(백엔드)**

* `GET /api/items?country=KR&...` (필터 파라미터 유지)
* `POST /api/favorites` `{ itemId }` → 201
* `DELETE /api/favorites/:itemId` → 204
* `GET /api/favorites` → 나의 관심 목록 반환

**DB**

* `favorites`(userId, itemId, createdAt) **유니크 인덱스(userId+itemId)**
* `items`에 `saleCountry`(ISO-2 권장) 인덱스 추가

---

## 4) 상품 등록 페이지 개선

**요구사항**

1. **설명 입력란 높이 확대**: 현재 대비 **세로 1.5배**(CSS height/rows 조정). 오토리사이즈 지원 가능.
2. **사진 추가 시 성공 팝업 금지**: "이미지 추가 완료" 팝업 제거. **실패 시에만** 경고.
3. **필수 입력**

   * **거래 가능 기간**을 제외한 모든 필드 **필수**.
   * 각 필드 라벨 **우측에 `*`** 표시.
   * 미입력 제출 시: 폼 상단 **요약 에러** + 각 필드 **인라인 에러** + 포커스 이동. (막연한 팝업 금지)
4. **이미지 처리 구조 적용**: (섹션 1 파이프라인 준수) 업로드 즉시 썸네일/중간본 URL 확보 가능하도록 진행상태 표시는 프로그레스 바로 대체(선택), 팝업 사용 금지.

---

## 5) 상품 상세 페이지 개선

**요구사항**

1. 상단 대표 이미지는 **중간본** 사용, 클릭 시 뷰어/모달에서 **원본** 로드.
2. **하트(찜)** 토글 가능(홈과 동일 규칙), MY > 관심 상품에 반영.
3. **거래 국가(saleCountry), 거래 희망 장소(meetLocation)** 명확히 노출(라벨 포함).
4. 가격 표기 규칙은 **홈과 동일**(KRW 기본, 우측 괄호에 원 통화).

---

## 6) 프론트엔드 구현 지침

* 이미지 태그: `loading="lazy"`, `decoding="async"`, `fetchPriority` 적절히 설정.
* 반응형: `srcset`/`sizes` 및 **정방형 썸네일** 크롭 유지.
* 상태관리/데이터패칭: React Query(또는 swr). 필터 변경 시 **이전 데이터 유지**.
* 접근성: 모든 아이콘 버튼(하트 등)에 `aria-label`, 포커스 스타일, 키보드 조작 가능.
* 오류 처리: 토스트(비저장성 UI), 치명적 오류만 모달/다이얼로그.

---

## 7) 백엔드 구현 지침

* 이미지 업로드: `POST /api/uploads/presign`(확장자/용량/개수 검증), 프론트는 presigned URL로 직접 업로드.
* 이미지 메타: 업로드 후 `thumbnailUrl`, `mediumUrl`, `originalUrl`을 `items.images[]`에 저장.
* 환율: node-cron으로 갱신, DB에 `exchange_rates`(base, ratesJSON, updatedAt).
* 캐싱 헤더: 정적 이미지 캐시 장기화(`Cache-Control: public, max-age=31536000, immutable`).

---

## 8) 완료 정의(DoD)

* 홈 필터 클릭 시 **스피너 없이** 리스트가 부드럽게 갱신(플리커/점프 없음).
* 모든 가격 **KRW 기본**, 원 통화 존재 시 **우측 괄호** 표기.
* 하트 토글은 로그인 상태에서 **낙관적 업데이트**, MY > 관심에서 항목 확인/해제 가능.
* 국가 필터 적용 시 해당 국가 상품만 노출.
* 등록 페이지: 설명 입력란 1.5배, 성공 팝업 제거, **필수 미입력 시 인라인 에러**.
* 이미지 파이프라인: 홈=썸네일, 상세=중간본, 원본보기=원본. 원본은 클릭 시에만 네트워크 요청.
* 상세 페이지에 거래 국가/희망 장소 노출.
* 환율은 **일 1회 자동 갱신**되고 장애 시 마지막 값 사용.
* 기본/스마트폰/저속 네트워크에서 성능 측정: LCP<2.5s(상세), CLS<0.1, 이미지 전송량 절감 확인.

---

## 9) 테스트 시나리오(발췌)

* \[홈] 국가=KR 필터 클릭 → 스피너 없음, 리스트 200ms 내 변동 시작, 플리커 없음.
* \[홈] 원 통화 USD/JPY 상품 카드 → `KRW (원 통화)` 규칙대로 표기.
* \[관심] 홈/상세에서 하트 클릭 → 즉시 채워짐, 새로고침 후에도 유지. MY > 관심에서 노출.
* \[등록] 이미지 업로드 실패 유도 → 에러 토스트 노출, 성공 팝업 없음.
* \[등록] 필수값 비워 제출 → 상단 요약 + 인라인 에러.
* \[상세] 대표 이미지 클릭 → 뷰어에서 원본 로드, 확대 선명.
* \[환율] 강제 갱신 엔드포인트 호출 → 캐시 갱신 후 가격 재계산 반영.

---

## 10) 산출물

* 변경된 **API 명세서**(간단한 README)
* 수정/추가된 **컴포넌트 목록과 위치**, 사용 훅/상태 요약
* 환경변수/시크릿 목록(`EXCHANGE_API_URL`, `S3_BUCKET`, 등)
* 간단한 **릴리즈 노트**와 롤백 지침
