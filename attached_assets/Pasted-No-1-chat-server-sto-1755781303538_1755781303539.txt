No.	카테고리/페이지	이슈 / 개선점	상세 설명 (재현 방법)	기대 동작	해결 방안 제안	우선순위
1	채팅 (/chat)	다른 사용자의 채팅 목록 노출 가능성	server/storage.ts의 getChatRooms 함수 로직은 현재 로그인한 사용자가 구매자(buyerId) 또는 판매자(sellerId)인 모든 채팅방을 가져옵니다. 테스트 계정 로그인 시 다른 채팅이 보이는 문제는 이 로직이 의도와 다르게 작동하고 있음을 시사합니다.	현재 로그인한 사용자가 참여한 채팅방만 정확히 필터링되어야 합니다.	getChatRooms 함수의 where 절 로직을 재검토하고, 테스트 시나리오(A-B 채팅, C 로그인 시 A-B 채팅 안보임)를 통해 쿼리의 정확성을 검증해야 합니다.	최상
2	UI/UX (전역)	하단 네비게이션 바의 채팅 알림 배지가 '2'로 하드코딩되어 있음	client/src/components/layout/bottom-nav.tsx 파일의 navItems 배열을 보면, 채팅 아이템에 badge: 2가 고정값으로 설정되어 있습니다.	안 읽은 메시지가 있는 채팅방의 수를 실시간으로 계산하여 배지에 표시해야 합니다.	1. DB messages 테이블에 isRead (boolean) 컬럼 추가.<br>2. 안 읽은 메시지 수를 반환하는 API 엔드포인트(/api/chats/unread-count) 생성.<br>3. useQuery를 이용해 해당 데이터를 불러와 네비게이션 바에 동적으로 렌더링.	높음
3	알림 기능 (전역)	알림 기능의 범위와 동작이 정의되지 않음	헤더의 알림(Bell) 아이콘은 UI만 존재하며, 어떤 상황에, 어떤 내용의 알림을, 어떻게 보여줄지에 대한 정책과 기능이 없습니다.₩	사용자의 앱 사용 경험을 증진시키는 핵심적인 알림(새 메시지, 내 글에 달린 댓글, 거래 상태 변경 등)이 실시간으로 제공되어야 합니다.	[알림 기능 정의]<br>1. DB 스키마 추가: notifications 테이블 (id, userId, type, content, link, isRead, createdAt)<br>2. 알림 발생 조건: 새 메시지 수신 시, 내 게시글/댓글에 반응 시, 거래 상태 변경 시<br>3. 구현: 서버에서 이벤트 발생 시 notifications 테이블에 데이터 생성 → 클라이언트에서 주기적으로 API 호출 또는 WebSocket으로 실시간 수신 → 헤더 아이콘에 알림 표시	높음
4	물품 상세 (/items/:id)	찜하기(Heart) 기능 미연동	ItemCard.tsx와 detail.tsx의 찜하기 버튼은 UI만 있고, 실제 favorites 테이블과 연동되는 API 호출 로직이 없습니다.	사용자가 찜하기 버튼을 누르면 POST /api/items/:id/toggle-like API가 호출되어 DB에 반영되고, 버튼의 상태(채워진 하트/빈 하트)가 즉시 변경되어야 합니다.	onToggleFavorite 함수 내에 useMutation을 사용하여 API를 호출하고, optimistic update를 통해 서버 응답 전 UI를 먼저 업데이트하여 사용자 경험을 개선합니다.	높음
5	마이페이지 (/my)	하위 메뉴 페이지 미개발	내 상품 관리', '관심 상품', '리뷰 관리', '설정' 메뉴 클릭 시 이동할 페이지 컴포넌트(*.tsx) 파일이 없습니다.	각 메뉴 클릭 시 해당 기능을 수행하는 페이지로 정상적으로 이동해야 합니다.	/my/items, /my/favorites, /my/reviews, /settings 경로에 해당하는 페이지 컴포넌트를 각각 생성하고 App.tsx의 라우터에 등록해야 합니다.	높음
6	커뮤니티 (/community)	게시글 상세 보기 및 댓글 기능 부재	게시글 목록에서 항목을 클릭해도 아무런 동작이 없습니다. 댓글 수를 표시하지만, 실제 댓글을 보거나 작성할 수 있는 기능이 없습니다.	게시글을 클릭하면 상세 페이지로 이동하여 전체 내용과 댓글 목록을 볼 수 있어야 하며, 댓글 작성이 가능해야 합니다.	1. 게시글 ID를 파라미터로 받는 상세 페이지(/community/:postId) 라우트 추가.<br>2. 상세 페이지 컴포넌트에서 게시글 데이터와 댓글 목록을 API로 호출.<br>3. 댓글 작성 폼과 등록을 처리하는 useMutation 구현.	높음
7	물품 등록 (/items/create)	이미지 업로드 순서 변경 UI가 직관적이지 않음	드래그 앤 드롭으로 대표 사진을 변경할 수 있지만, '첫 번째 사진이 대표 사진'이라는 설명에 의존해야 합니다.	사용자가 어떤 사진이 대표 사진인지 명확하게 인지할 수 있도록 UI/UX 개선이 필요합니다.	대표 사진으로 지정된 이미지 위에 '대표'라는 뱃지를 항상 표시하고, 다른 사진 위에는 '대표로 지정' 버튼을 추가하는 방식을 고려해볼 수 있습니다.	보통
8	전체 (인증)	테스트 로그인 세션 문제	/test-login을 통해 로그인 시, 이전 사용자 정보가 완전히 초기화되지 않아 다른 사람의 데이터가 보이는 문제가 발생할 수 있습니다.	테스트 로그인을 포함한 모든 로그인 시도 시, 이전 세션 정보는 완전히 삭제되고 새로운 사용자의 정보로 교체되어야 합니다.	useAuth의 login 함수 시작 부분에 localStorage.clear() 또는 필요한 항목들을 명시적으로 삭제하는 로직을 추가하여 이전 사용자 데이터를 완전히 제거합니다.	보통
9	관리자 대시보드 (/admin)	신고 관리 기능 부재	사용자가 물품을 신고해도, 관리자가 신고 내역을 확인하고 처리할 수 있는 UI와 기능이 없습니다.	관리자 대시보드에 '신고 관리' 탭을 추가하고, 신고된 항목 목록, 신고 사유, 처리 상태(대기, 처리 완료 등)를 관리할 수 있어야 합니다.	1. DB reports 테이블의 데이터를 조회하는 API 엔드포인트 생성.<br>2. 관리자 페이지에 신고 내역을 보여주는 테이블 컴포넌트 추가.<br>3. 신고 처리 상태를 변경하는 API 및 useMutation 구현.	보통
10	서버 (API)	API 요청에 대한 유효성 검사(Validation) 부족	server/routes.ts에서 일부 라우트는 Zod 스키마를 사용하지만, 모든 API 입력값에 대한 포괄적인 유효성 검사가 부족합니다.	악의적인 요청이나 잘못된 데이터로부터 서버를 보호하기 위해 모든 API 요청의 body, params, query에 대해 엄격한 유효성 검사가 필요합니다.	Zod를 사용하여 모든 API 엔드포인트에 대한 입력 스키마를 정의하고, 요청 처리 시작 부분에서 유효성 검사를 수행하는 미들웨어를 추가합니다.	낮음